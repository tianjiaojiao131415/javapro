package datestruct;import java.io.*;/** * Created by admin on 2020/2/16. * * 稀疏数组与二维数组之间的转换 */public class SparseArray {    public static File file = new File("d:\\map.data");    public static int sum=0;    public static int[][] charssarray = new  int[11][11];    public static int[][] sparseArr = new int[sum+1][3];    public static int[][] charArr2=new int[sparseArr[0][0]][sparseArr[0][1]];    public static void main(String[] args) {        //创建一个二维数组11*11        charssarray = new  int[11][11];        //1代表黑子，2代表蓝子        charssarray[1][2]=1;        charssarray[2][3]=2;        charssarray[4][5]=1;        //增强for 循环输出原始的二维数据        for (int[] row:charssarray ){            //循环输出每一行的数据            for (int data:row){                System.out.print(data);            }            //循环完一行之后进行换行            System.out.println();        }        //将二维数组 int[i][j] 转换为稀疏数组的思路        //1、先获取二维数组中不为0的数的个数sum        int sum=0;        for (int i = 0; i <charssarray.length ; i++) {            for (int j = 0; j <charssarray.length ; j++) {                if (charssarray[i][j]!=0){                    sum++;                }            }        }      //创建一个稀疏数组        int[][] sparseArr = new int[sum+1][3];        //给稀疏数组赋值        sparseArr[0][0]=11;        sparseArr[0][1]=11;        sparseArr[0][2]=sum;        //把值放入到稀疏数组中        int count=0;//用来作为计数器，记录不为0的数的个数        for (int i = 0; i <charssarray.length ; i++) {            for (int j = 0; j <charssarray.length ; j++) {                if (charssarray[i][j]!=0) {                    count++;                    sparseArr[count][0]=i;                    sparseArr[count][1]=j;                    sparseArr[count][2]=charssarray[i][j];                }            }        }        //输出稀疏数组的形式        System.out.println();        System.out.println("输出的稀疏数组为：");        for (int i = 0; i <sparseArr.length ; i++) {          System.out.printf("%d\t%d\t%d\t\n",sparseArr[i][0],sparseArr[i][1],sparseArr[i][2]);        }        //每输出一行进行换行        System.out.println();        //把稀疏数组在转换为二维数组        /**         * 思路：         * 1、先读该稀疏数组的第一行，根据第一行数据，创建原始的二维数组，比如上面的charArr2=int[11][11]         * 2、在读取稀疏数组后几行的数据，并把值赋给原始的二维数组即可         *         * */        //1、先读该稀疏数组的第一行，根据第一行数据，创建原始的二维数组，比如上面的charArr2=int[11][11]        int[][] charArr2=new int[sparseArr[0][0]][sparseArr[0][1]];        //2、在读取稀疏数组后几行的数据（从第二行开始），并把值赋给原始的二维数组即可        for (int i = 1; i <sparseArr.length ; i++) {            charArr2[sparseArr[i][0]][sparseArr[i][1]]=sparseArr[i][2];        }        System.out.println("输出恢复后的二维数组");        for (int[] row:charArr2){            for (int data:row){               System.out.printf("%d\t",data);            }            System.out.println();        }        if (!file.exists()){            write();        }else {            read();        }    }    public static void write(){        OutputStream os=null;        ObjectOutputStream oos =null;        try {             os = new FileOutputStream(file);             oos =new ObjectOutputStream(os);             oos.writeObject(sparseArr);             oos.flush();             os.flush();        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }finally {            try {                if (oos!=null)                    oos.close();                if (os!=null){                    os.close();                }            } catch (IOException e) {                e.printStackTrace();            }        }    }    public static void read(){        InputStream is =null;        ObjectInputStream ois = null;        try {            is= new FileInputStream(file);            ois = new ObjectInputStream(is);            charArr2=(int[][]) ois.readObject();        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        } catch (ClassNotFoundException e) {            e.printStackTrace();        }finally {            try {                if (ois!=null)                    ois.close();                if (is!=null)                    is.close();            } catch (IOException e) {                e.printStackTrace();            }        }    }}