package datestruct;/** * Created by admin on 2020/2/17. * 单项链表 */public class SingleNodeDemo {    public static void main(String[] args) {      HeroNode hero1 = new HeroNode(1,"宋江","及时雨");      HeroNode hero2= new HeroNode(2,"吴用","智多星");      HeroNode hero3 = new HeroNode(3,"林冲","豹子头");      //创建一个链表        SingleLinkedList singleLinkedList= new SingleLinkedList();    /*    singleLinkedList.addNode(hero1);        singleLinkedList.addNode(hero2);        singleLinkedList.addNode(hero3);        */    //重新再调用按编号添加的方法        singleLinkedList.addOrde(hero2);        singleLinkedList.addOrde(hero3);        singleLinkedList.addOrde(hero1);        singleLinkedList.showNode();    }   public static class SingleLinkedList{        //定义一个头节点，里面不放值          private HeroNode head = new HeroNode(0,"","");        //添加值到单向列表中        /**         * 思路：当不考虑编号的顺序时         * 1、找到当前链表的最后节点         * 2、将最后这个节点的next 指向新的节点         * */        public  void  addNode(HeroNode heroNode){            //因为头节点不能动，所以需要定义一个变量来存放头节点            HeroNode temp=head;            while (true){                //此时链表找到了最后                if (temp.next==null){                    break;                }                //如果没有找到最后，把temp后移                temp=temp.next;            }            //当退出循环时，temp 找到了最后，temp就指向了新的节点            temp.next=heroNode;        }        //按照顺序来添加英雄        public  void addOrde(HeroNode heroNode){            //因为头指针不能改变所以需要定义一个变量            HeroNode temp = head;            //定义一个flage 标识，来判断要加的英雄的顺序是否已经存在，默认为false            boolean flage=false;            //遍历            while (true){                if (temp.next==null){//此时链表已经找到了最后                    break;                }                if (temp.next.no>heroNode.no){//找到位置，放在temp的后面                    break;                }else if (temp.next.no==heroNode.no){//此时说明该节点已经存在                    flage=true;//说明编号已经存在                    break;                }                temp=temp.next;//当没有找到时，要继续将temp后移            }            if (flage){                System.out.println("编号已经存在"+heroNode);            }else {                //插入节点                heroNode.next=temp.next;                temp.next=heroNode;            }        }        //显示列表        public void showNode( ){            //1、判断链表是否为空            if (head.next==null){                System.out.println("链表为空");                return;            }            //因为头节点不能动，所以需要定义一个变量            HeroNode temp = head;            //遍历链表            while (true){                if (temp==null){                    break;                }                //输出节点                System.out.println(temp);                //一定要将next后移                temp=temp.next;            }        }    }    //定义heroNode ，每一个HeroNode 对象都是一个英雄   public static class HeroNode{        public int no;        public String name;        public String nickName;//英雄的昵称        public HeroNode next;       public HeroNode(int no, String name, String nickName) {           this.no = no;           this.name = name;           this.nickName = nickName;       }       @Override       public String toString() {           return "HeroNode{" +                   "no=" + no +                   ", name='" + name + '\'' +                   ", nickName='" + nickName + '\'' +                   '}';       }   }}