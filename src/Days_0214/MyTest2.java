package Days_0214;/** * Created by admin on 2020/2/15. */public class MyTest2 {    public static void main(String[] args) {        /**         * 异常         * 在运行的时候产生了一些错误         * 对于有可能出现的异常代码，我们需要进行处理         * 处理方式：         *          对于有可能出现的错误代码，需要用try{  }进行包裹，用来捕获异常         *          catch(Exception){ 出现异常时，需要怎么办 }  Exception处理异常的最大类         *          finally{ 无论怎么样都要执行 }         * */        /*try {            int []  a = new int[3];            a[3]=1;        }catch (Exception ex){            System.out.println("出现异常了");        }finally {            System.out.println("无论怎样都执行");        }*/        String str = null;        //此处必须进行try/catch的捕获        try {            str = method();        } catch (Exception e) {            e.printStackTrace();        }        System.out.println(str);    }    public static String method() throws Exception {            int k =100/0;            return "efg";        /*try {            int k =100/0;//代码从这出现了错误，后面的代码就不会再执行了            return "efg";        }catch (Exception ex){            return "asdfff";        }finally {            System.out.println("无论怎样都要执行");            *//**             * finally不一定一定会执行             * 1、如果在try之前代码就已经出现了错误，那么就会不进入try中，就不会执行             * 2、try或者catch中强行关闭进程             *             * 如果定义一个方法有可能会出现已成，但是我们又不想自己来处理异常             * 但是还要提醒调用方法的人，那么就在调用方法的地方加上throws             * 一旦方法加上 throws Exception ，调用方法时就必须要处理             * *//*        }*/    }}